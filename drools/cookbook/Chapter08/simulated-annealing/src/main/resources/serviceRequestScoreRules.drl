package drools.cookbook.chapter08;

import java.util.EnumSet;
import java.util.Set;
import drools.cookbook.chapter08.domain.ServiceRequest;
import drools.cookbook.chapter08.domain.Skill;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.calculator.SimpleScoreCalculator;

global SimpleScoreCalculator scoreCalculator;

rule "sameCity"
    when
        $sd : ServiceRequest(technician.location != location)
    then
        insertLogical(new IntConstraintOccurrence("sameCity", 1, $sd));
end

rule "isBusy"
    when
        $sd : ServiceRequest(technician.busy == true)
    then
        insertLogical(new IntConstraintOccurrence("isBusy", 6, $sd));
end

rule "skillMatch"
    when
        $sd : ServiceRequest($neededSkills : neededSkills, $tec : technician)
    then
        Set<Skill> tempSkills = EnumSet.copyOf($neededSkills);
        tempSkills.removeAll($tec.getSkills());
        insertLogical(new IntConstraintOccurrence("skillMatch", tempSkills.size() * 3, $sd));
end

rule "hardConstraintsBroken"
salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(IntConstraintOccurrence($weight : weight),
                                              sum($weight))
    then
        scoreCalculator.setScore(- $hardTotal.intValue());
end
