package drools.cookbook.chapter09;import java.util.Random;import org.drools.KnowledgeBase;import org.drools.builder.KnowledgeBuilder;import org.drools.builder.KnowledgeBuilderError;import org.drools.builder.KnowledgeBuilderFactory;import org.drools.builder.ResourceType;import org.drools.io.ResourceFactory;import org.drools.runtime.StatefulKnowledgeSession;import org.drools.runtime.process.ProcessInstance;import org.jbpm.process.audit.WorkingMemoryDbLogger;/** *  * @author Lucas Amador *  */public class BAMReporting {    public static void main(String[] args) throws Exception {        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();        kbuilder.add(ResourceFactory.newClassPathResource("processWithSignalEvent.bpmn"), ResourceType.BPMN2);        kbuilder.add(ResourceFactory.newClassPathResource("processWithScriptTask.bpmn"), ResourceType.BPMN2);        if (kbuilder.hasErrors()) {            for (KnowledgeBuilderError error : kbuilder.getErrors()) {                System.err.println(error);            }            throw new IllegalArgumentException("Unable to parse knowledge.");        }        KnowledgeBase kbase = kbuilder.newKnowledgeBase();        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();        WorkingMemoryDbLogger historyLogger = new WorkingMemoryDbLogger(ksession);        for (int i = 0; i < 20; i++) {            ksession.startProcess("processWithScriptTask");        }        Random random = new Random();        for (int i = 0; i < 50; i++) {            ProcessInstance processInstance = ksession.startProcess("processWithSignalEvent");            if (random.nextBoolean()) {                Thread.sleep(random.nextInt(3000));                ksession.signalEvent("mySignal", null, processInstance.getId());            }        }        ksession.dispose();        historyLogger.dispose();    }}